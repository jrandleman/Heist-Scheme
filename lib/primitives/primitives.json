{
  "stdlib.scm": null,
  "../primitives/stdlib/data/atomics/numerics/numerics.hpp": {
        "primitive_ADD":                     "+",
        "primitive_SUB":                     "-",
        "primitive_MUL":                     "*",
        "primitive_DIV":                     "/",
        "primitive_ABS":                     "abs",
        "primitive_EXPT":                    "expt",
        "primitive_EXPT_MOD":                "expt-mod",
        "primitive_MAX":                     "max",
        "primitive_MIN":                     "min",
        "primitive_QUOTIENT":                "quotient",
        "primitive_REMAINDER":               "remainder",
        "primitive_DIVMOD":                  "divmod",
        "primitive_MODULO":                  "modulo",
        "primitive_EXP":                     "exp",
        "primitive_LOG":                     "log",
        "primitive_SQRT":                    "sqrt",
        "primitive_GCD":                     "gcd",
        "primitive_LCM":                     "lcm",
        "primitive_MODF":                    "modf",
        "primitive_NPR":                     "npr",
        "primitive_NCR":                     "ncr",
        "primitive_MAKE_POLAR":              "make-polar",
        "primitive_MAKE_RECTANGULAR":        "make-rectangular",
        "primitive_REAL_PART":               "real-part",
        "primitive_IMAG_PART":               "imag-part",
        "primitive_MAGNITUDE":               "magnitude",
        "primitive_ANGLE":                   "angle",
        "primitive_CONJUGATE":               "conjugate",
        "primitive_ODDP":                    "odd?",
        "primitive_EVENP":                   "even?",
        "primitive_POSITIVEP":               "positive?",
        "primitive_NEGATIVEP":               "negative?",
        "primitive_ZEROP":                   "zero?",
        "primitive_NOT_POSITIVEP":           "not-positive?",
        "primitive_NOT_NEGATIVEP":           "not-negative?",
        "primitive_NOT_ZEROP":               "not-zero?",
        "primitive_INFINITEP":               "infinite?",
        "primitive_FINITEP":                 "finite?",
        "primitive_NANP":                    "nan?",
        "primitive_CEILING":                 "ceiling",
        "primitive_FLOOR":                   "floor",
        "primitive_TRUNCATE":                "truncate",
        "primitive_ROUND":                   "round",
        "primitive_COERCE_INEXACT_TO_EXACT": "inexact->exact",
        "primitive_COERCE_EXACT_TO_INEXACT": "exact->inexact",
        "primitive_EXACTP":                  "exact?",
        "primitive_INEXACTP":                "inexact?",
        "primitive_INTEGERP":                "integer?",
        "primitive_BIGINTP":                 "bigint?",
        "primitive_NUMERATOR":               "numerator",
        "primitive_DENOMINATOR":             "denominator",
        "primitive_MAKE_LOG_BASE":           "make-log-base",
        "primitive_SIN":                     "sin",
        "primitive_COS":                     "cos",
        "primitive_TAN":                     "tan",
        "primitive_ASIN":                    "asin",
        "primitive_ACOS":                    "acos",
        "primitive_ATAN":                    "atan",
        "primitive_SINH":                    "sinh",
        "primitive_COSH":                    "cosh",
        "primitive_TANH":                    "tanh",
        "primitive_ASINH":                   "asinh",
        "primitive_ACOSH":                   "acosh",
        "primitive_ATANH":                   "atanh",
        "primitive_LOGAND":                  "logand",
        "primitive_LOGOR":                   "logor",
        "primitive_LOGXOR":                  "logxor",
        "primitive_LOGNOT":                  "lognot",
        "primitive_LOGLSL":                  "loglsl",
        "primitive_LOGLSR":                  "loglsr",
        "primitive_LOGASR":                  "logasr",
        "primitive_LOGBITP":                 "logbit?",
        "primitive_LOGBIT1":                 "logbit1",
        "primitive_LOGBIT0":                 "logbit0",
        "primitive_LOGBIT_CMPL":             "logbit~",
        "primitive_RANDOM":                  "random",
        "primitive_EQ":                      "=",
        "primitive_GT":                      ">",
        "primitive_LT":                      "<",
        "primitive_GTE":                     ">=",
        "primitive_LTE":                     "<=",
  },
  "../primitives/stdlib/data/comparisons.hpp": {
        "primitive_EQP":    "eq?",
        "primitive_EQVP":   "eqv?",
        "primitive_EQUALP": "equal?",
        "primitive_NOT":    "not",
  },
  "../primitives/stdlib/data/copying.hpp": {
        "primitive_COPY":         "copy",
        "primitive_SHALLOW_COPY": "shallow-copy",
  },
  "../primitives/stdlib/data/atomics/characters/characters.hpp": {
        "primitive_EOF":                "eof",
        "primitive_CHAR_EQP":           "char=?",
        "primitive_CHAR_LTP":           "char<?",
        "primitive_CHAR_GTP":           "char>?",
        "primitive_CHAR_LTEP":          "char<=?",
        "primitive_CHAR_GTEP":          "char>=?",
        "primitive_CHAR_CI_EQP":        "char-ci=?",
        "primitive_CHAR_CI_LTP":        "char-ci<?",
        "primitive_CHAR_CI_GTP":        "char-ci>?",
        "primitive_CHAR_CI_LTEP":       "char-ci<=?",
        "primitive_CHAR_CI_GTEP":       "char-ci>=?",
        "primitive_CHAR_ALPHABETICP":   "char-alphabetic?",
        "primitive_CHAR_NUMERICP":      "char-numeric?",
        "primitive_CHAR_WHITESPACEP":   "char-whitespace?",
        "primitive_CHAR_UPPER_CASEP":   "char-upper-case?",
        "primitive_CHAR_LOWER_CASEP":   "char-lower-case?",
        "primitive_CHAR_ALHPANUMERICP": "char-alphanumeric?",
        "primitive_CHAR_CONTROLP":      "char-control?",
        "primitive_CHAR_PRINTP":        "char-print?",
        "primitive_CHAR_GRAPHP":        "char-graph?",
        "primitive_CHAR_PUNCTUATIONP":  "char-punctuation?",
        "primitive_CHAR_XDIGITP":       "char-xdigit?",
        "primitive_CHAR_UPCASE":        "char-upcase",
        "primitive_CHAR_DOWNCASE":      "char-downcase",
  },
  "../primitives/stdlib/data/containers/strings/strings.hpp": {
        "primitive_MAKE_STRING":              "make-string",
        "primitive_STRING":                   "string",
        "primitive_STRING_UNFOLD":            "string-unfold",
        "primitive_STRING_UNFOLD_RIGHT":      "string-unfold-right",
        "primitive_STRING_PAD":               "string-pad",
        "primitive_STRING_PAD_RIGHT":         "string-pad-right",
        "primitive_STRING_TRIM":              "string-trim",
        "primitive_STRING_TRIM_RIGHT":        "string-trim-right",
        "primitive_STRING_TRIM_BOTH":         "string-trim-both",
        "primitive_STRING_REPLACE":           "string-replace",
        "primitive_STRING_CONTAINS":          "string-contains",
        "primitive_STRING_CONTAINS_RIGHT":    "string-contains-right",
        "primitive_STRING_CONTAINS_CI":       "string-contains-ci",
        "primitive_STRING_CONTAINS_RIGHT_CI": "string-contains-right-ci",
        "primitive_STRING_JOIN":              "string-join",
        "primitive_STRING_SPLIT":             "string-split",
        "primitive_STRING_EMPTYP":            "string-empty?",
        "primitive_STRING_SWAP_BANG":         "string-swap!",
        "primitive_STRING_PUSH_BACK_BANG":    "string-push-back!",
        "primitive_STRING_PUSH_FRONT_BANG":   "string-push-front!",
        "primitive_STRING_POP_BACK_BANG":     "string-pop-back!",
        "primitive_STRING_POP_FRONT_BANG":    "string-pop-front!",
        "primitive_STRING_COPY_BANG":         "string-copy!",
        "primitive_STRING_EQP":               "string=?",
        "primitive_STRING_LTP":               "string<?",
        "primitive_STRING_GTP":               "string>?",
        "primitive_STRING_LTEP":              "string<=?",
        "primitive_STRING_GTEP":              "string>=?",
        "primitive_STRING_CI_EQP":            "string-ci=?",
        "primitive_STRING_CI_LTP":            "string-ci<?",
        "primitive_STRING_CI_GTP":            "string-ci>?",
        "primitive_STRING_CI_LTEP":           "string-ci<=?",
        "primitive_STRING_CI_GTEP":           "string-ci>=?",
        "primitive_REGEX_REPLACE":            "regex-replace",
        "primitive_REGEX_REPLACE_ALL":        "regex-replace-all",
        "primitive_REGEX_MATCH":              "regex-match",
        "primitive_REGEX_SPLIT":              "regex-split",
  },
  "../primitives/stdlib/data/containers/hmaps/hmaps.hpp": {
        "primitive_HMAP":                 "hmap",
        "primitive_HMAP_KEYS":            "hmap-keys",
        "primitive_HMAP_VALS":            "hmap-vals",
        "primitive_HMAP_REF":             "hmap-ref",
        "primitive_HMAP_LENGTH":          "hmap-length",
        "primitive_HMAP_EMPTYP":          "hmap-empty?",
        "primitive_HMAP_KEYP":            "hmap-key?",
        "primitive_HMAP_HASHABLEP":       "hmap-hashable?",
        "primitive_HMAP_SET_BANG":        "hmap-set!",
        "primitive_HMAP_DELETE_BANG":     "hmap-delete!",
        "primitive_HMAP_MERGE":           "hmap-merge",
        "primitive_HMAP_MERGE_BANG":      "hmap-merge!",
        "primitive_HMAP_FOR_EACH_KEY":    "hmap-for-each-key",
        "primitive_HMAP_FOR_EACH_VAL":    "hmap-for-each-val",
        "primitive_HMAP_FOR_EACH":        "hmap-for-each",
        "primitive_HMAP_MAP_BANG":        "hmap-map!",
        "primitive_HMAP_MAP":             "hmap-map",
        "primitive_COERCE_HMAP_TO_ALIST": "hmap->alist",
        "primitive_COERCE_ALIST_TO_HMAP": "alist->hmap",
  },
  "../primitives/stdlib/data/containers/pairs/pairs.hpp": {
        "primitive_CONS":           "cons",
        "primitive_CAR":            "car",
        "primitive_CDR":            "cdr",
        "primitive_NULLP":          "null?",
        "primitive_SETCAR_BANG":    "set-car!",
        "primitive_SETCDR_BANG":    "set-cdr!",
        "primitive_PAIR_SWAP_BANG": "pair-swap!",
        "primitive_CAAR":           "caar",
        "primitive_CADR":           "cadr",
        "primitive_CDAR":           "cdar",
        "primitive_CDDR":           "cddr",
        "primitive_CAAAR":          "caaar",
        "primitive_CAADR":          "caadr",
        "primitive_CADAR":          "cadar",
        "primitive_CADDR":          "caddr",
        "primitive_CDAAR":          "cdaar",
        "primitive_CDADR":          "cdadr",
        "primitive_CDDAR":          "cddar",
        "primitive_CDDDR":          "cdddr",
        "primitive_CAAAAR":         "caaaar",
        "primitive_CAAADR":         "caaadr",
        "primitive_CAADAR":         "caadar",
        "primitive_CAADDR":         "caaddr",
        "primitive_CADAAR":         "cadaar",
        "primitive_CADADR":         "cadadr",
        "primitive_CADDAR":         "caddar",
        "primitive_CADDDR":         "cadddr",
        "primitive_CDAAAR":         "cdaaar",
        "primitive_CDAADR":         "cdaadr",
        "primitive_CDADAR":         "cdadar",
        "primitive_CDADDR":         "cdaddr",
        "primitive_CDDAAR":         "cddaar",
        "primitive_CDDADR":         "cddadr",
        "primitive_CDDDAR":         "cdddar",
        "primitive_CDDDDR":         "cddddr",
  },
  "../primitives/stdlib/data/containers/lists/lists.hpp": {
        "primitive_LIST":                 "list",
        "primitive_LIST_STAR":            "list*",
        "primitive_CIRCULAR_LIST":        "circular-list",
        "primitive_MAKE_LIST":            "make-list",
        "primitive_IOTA":                 "iota",
        "primitive_LAST_PAIR":            "last-pair",
        "primitive_UNFOLD":               "unfold",
        "primitive_UNFOLD_RIGHT":         "unfold-right",
        "primitive_CIRCULAR_LISTP":       "circular-list?",
        "primitive_LIST_STARP":           "list*?",
        "primitive_LISTP":                "list?",
        "primitive_ALISTP":               "alist?",
        "primitive_GET_ALL_COMBINATIONS": "get-all-combinations",
        "primitive_MEMQ":                 "memq",
        "primitive_MEMV":                 "memv",
        "primitive_MEMBER":               "member",
        "primitive_ASSQ":                 "assq",
        "primitive_ASSV":                 "assv",
        "primitive_ASSOC":                "assoc",
  },
  "../primitives/stdlib/data/containers/vectors/vectors.hpp": {
        "primitive_VECTOR":                      "vector",
        "primitive_MAKE_VECTOR":                 "make-vector",
        "primitive_VECTOR_IOTA":                 "vector-iota",
        "primitive_VECTOR_UNFOLD":               "vector-unfold",
        "primitive_VECTOR_UNFOLD_RIGHT":         "vector-unfold-right",
        "primitive_VECTOR_PUSH_BACK_BANG":       "vector-push-back!",
        "primitive_VECTOR_PUSH_FRONT_BANG":      "vector-push-front!",
        "primitive_VECTOR_POP_BACK_BANG":        "vector-pop-back!",
        "primitive_VECTOR_POP_FRONT_BANG":       "vector-pop-front!",
        "primitive_VECTOR_COPY_BANG":            "vector-copy!",
        "primitive_VECTOR_SWAP_BANG":            "vector-swap!",
        "primitive_VECTOR_GROW":                 "vector-grow",
        "primitive_VECTOR_EMPTYP":               "vector-empty?",
        "primitive_VECTOR_BINARY_SEARCH":        "vector-binary-search",
        "primitive_VECTOR_GET_ALL_COMBINATIONS": "vector-get-all-combinations",
  },
  "../primitives/stdlib/data/containers/seqs/seqs.hpp": {
        "primitive_EMPTY":                     "empty",
        "primitive_LENGTH":                    "length",
        "primitive_LENGTH_PLUS":               "length+",
        "primitive_REVERSE":                   "reverse",
        "primitive_REVERSE_BANG":              "reverse!",
        "primitive_FOLD":                      "fold",
        "primitive_FOLD_RIGHT":                "fold-right",
        "primitive_FILTER":                    "filter",
        "primitive_MAP":                       "map",
        "primitive_MAP_BANG":                  "map!",
        "primitive_FOR_EACH":                  "for-each",
        "primitive_SEQ_COPY_BANG":             "seq-copy!",
        "primitive_COUNT":                     "count",
        "primitive_REF":                       "ref",
        "primitive_SLICE":                     "slice",
        "primitive_SET_INDEX_BANG":            "set-index!",
        "primitive_SWAP_INDICES_BANG":         "swap-indices!",
        "primitive_FILL_BANG":                 "fill!",
        "primitive_APPEND":                    "append",
        "primitive_REMOVE":                    "remove",
        "primitive_REMOVE_FIRST":              "remove-first",
        "primitive_REMOVE_LAST":               "remove-last",
        "primitive_DELETE":                    "delete",
        "primitive_LAST":                      "last",
        "primitive_TAIL":                      "tail",
        "primitive_HEAD":                      "head",
        "primitive_INIT":                      "init",
        "primitive_SEQ_EQ":                    "seq=",
        "primitive_SKIP":                      "skip",
        "primitive_SKIP_RIGHT":                "skip-right",
        "primitive_INDEX":                     "index",
        "primitive_INDEX_RIGHT":               "index-right",
        "primitive_DROP":                      "drop",
        "primitive_DROP_RIGHT":                "drop-right",
        "primitive_TAKE":                      "take",
        "primitive_TAKE_RIGHT":                "take-right",
        "primitive_DROP_WHILE":                "drop-while",
        "primitive_DROP_RIGHT_WHILE":          "drop-right-while",
        "primitive_TAKE_WHILE":                "take-while",
        "primitive_TAKE_RIGHT_WHILE":          "take-right-while",
        "primitive_ANY":                       "any",
        "primitive_EVERY":                     "every",
        "primitive_CONJ":                      "conj",
        "primitive_COERCE_SEQ_TO_LIST":        "seq->list",
        "primitive_COERCE_SEQ_TO_VECTOR":      "seq->vector",
        "primitive_COERCE_SEQ_TO_STRING":      "seq->string",
        "primitive_UNION":                     "union",
        "primitive_INTERSECTION":              "intersection",
        "primitive_SYMMETRIC_DIFFERENCE":      "symmetric-difference",
        "primitive_DIFFERENCE":                "difference",
        "primitive_SORT":                      "sort",
        "primitive_SORT_BANG":                 "sort!",
        "primitive_SORTEDP":                   "sorted?",
        "primitive_MERGE":                     "merge",
        "primitive_DELETE_NEIGHBOR_DUPS":      "delete-neighbor-dups",
        "primitive_DELETE_NEIGHBOR_DUPS_BANG": "delete-neighbor-dups!",
  },
  "../primitives/stdlib/data/containers/streams/streams.hpp": {
        "primitive_DELAYP":                "delay?",
        "primitive_FORCE":                 "force",
        "primitive_SCAR":                  "scar",
        "primitive_SCDR":                  "scdr",
        "primitive_STREAM_LENGTH":         "stream-length",
        "primitive_SCAAR":                 "scaar",
        "primitive_SCADR":                 "scadr",
        "primitive_SCDAR":                 "scdar",
        "primitive_SCDDR":                 "scddr",
        "primitive_SCAAAR":                "scaaar",
        "primitive_SCAADR":                "scaadr",
        "primitive_SCADAR":                "scadar",
        "primitive_SCADDR":                "scaddr",
        "primitive_SCDAAR":                "scdaar",
        "primitive_SCDADR":                "scdadr",
        "primitive_SCDDAR":                "scddar",
        "primitive_SCDDDR":                "scdddr",
        "primitive_SCAAAAR":               "scaaaar",
        "primitive_SCAAADR":               "scaaadr",
        "primitive_SCAADAR":               "scaadar",
        "primitive_SCAADDR":               "scaaddr",
        "primitive_SCADAAR":               "scadaar",
        "primitive_SCADADR":               "scadadr",
        "primitive_SCADDAR":               "scaddar",
        "primitive_SCADDDR":               "scadddr",
        "primitive_SCDAAAR":               "scdaaar",
        "primitive_SCDAADR":               "scdaadr",
        "primitive_SCDADAR":               "scdadar",
        "primitive_SCDADDR":               "scdaddr",
        "primitive_SCDDAAR":               "scddaar",
        "primitive_SCDDADR":               "scddadr",
        "primitive_SCDDDAR":               "scdddar",
        "primitive_SCDDDDR":               "scddddr",
        "primitive_STREAM_FOR_EACH":       "stream-for-each",
        "primitive_STREAM_REF":            "stream-ref",
        "primitive_STREAM_DROP":           "stream-drop",
        "primitive_STREAM_DROP_WHILE":     "stream-drop-while",
        "primitive_STREAM_TAKE":           "stream-take",
        "primitive_STREAM_REVERSE":        "stream-reverse",
        "primitive_STREAM_FOLD":           "stream-fold",
        "primitive_STREAM_FOLD_RIGHT":     "stream-fold-right",
        "primitive_COERCE_STREAM_TO_LIST": "stream->list",
        "primitive_COERCE_LIST_TO_STREAM": "list->stream",
  },
  "../primitives/stdlib/data/types/predicates/predicates.hpp": {
        "primitive_TYPEOF":               "typeof",
        "primitive_POINTER_ADDRESS":      "pointer-address",
        "primitive_VOID":                 "void",
        "primitive_UNDEFINED":            "undefined",
        "primitive_VOIDP":                "void?",
        "primitive_UNDEFINEDP":           "undefined?",
        "primitive_HMAPP":                "hmap?",
        "primitive_EMPTYP":               "empty?",
        "primitive_PAIRP":                "pair?",
        "primitive_VECTORP":              "vector?",
        "primitive_CHARP":                "char?",
        "primitive_NUMBERP":              "number?",
        "primitive_REALP":                "real?",
        "primitive_COMPLEXP":             "complex?",
        "primitive_RATIONALP":            "rational?",
        "primitive_STRINGP":              "string?",
        "primitive_SYMBOLP":              "symbol?",
        "primitive_BOOLEANP":             "boolean?",
        "primitive_ATOMP":                "atom?",
        "primitive_PROCEDUREP":           "procedure?",
        "primitive_INPUT_PORTP":          "input-port?",
        "primitive_OUTPUT_PORTP":         "output-port?",
        "primitive_EOF_OBJECTP":          "eof-object?",
        "primitive_STREAM_PAIRP":         "stream-pair?",
        "primitive_STREAM_NULLP":         "stream-null?",
        "primitive_STREAMP":              "stream?",
        "primitive_SYNTAX_RULES_OBJECTP": "syntax-rules-object?",
        "primitive_SEQP":                 "seq?",
        "primitive_OBJECTP":              "object?",
        "primitive_CLASS_PROTOTYPEP":     "class-prototype?",
        "primitive_FUNCTORP":             "functor?",
        "primitive_CALLABLEP":            "callable?",
  },
  "../primitives/stdlib/data/types/coercions/coercions.hpp": {
        "primitive_COERCE_CHAR_TO_INTEGER":      "char->integer",
        "primitive_COERCE_INTEGER_TO_CHAR":      "integer->char",
        "primitive_COERCE_NUMBER_TO_STRING":     "number->string",
        "primitive_COERCE_STRING_TO_NUMBER":     "string->number",
        "primitive_COERCE_SYMBOL_TO_STRING":     "symbol->string",
        "primitive_COERCE_STRING_TO_SYMBOL":     "string->symbol",
        "primitive_COERCE_VECTOR_TO_LIST":       "vector->list",
        "primitive_COERCE_LIST_TO_VECTOR":       "list->vector",
        "primitive_COERCE_STRING_TO_VECTOR":     "string->vector",
        "primitive_COERCE_VECTOR_TO_STRING":     "vector->string",
        "primitive_COERCE_STRING_TO_LIST":       "string->list",
        "primitive_COERCE_LIST_TO_STRING":       "list->string",
        "primitive_COERCE_FUNCTOR_TO_PROCEDURE": "functor->procedure",
  },
  "../primitives/stdlib/sys/io/output/output.hpp": {
        "primitive_PPRINT":                     "pprint",
        "primitive_PPRINT":                     "pretty-print",
        "primitive_WRITE":                      "write",
        "primitive_NEWLINE":                    "newline",
        "primitive_DISPLAY":                    "display",
        "primitive_WRITE_CHAR":                 "write-char",
        "primitive_SPRINTF":                    "sprintf",
        "primitive_DISPLAYF":                   "displayf",
        "primitive_WRITEF":                     "writef",
        "primitive_PPRINTF":                    "pprintf",
        "primitive_PPRINTF":                    "pretty-printf",
        "primitive_COERCE_STRING_TO_ASCII_ART": "string->ascii-art",
        "primitive_COERCE_STRING_TO_SPACE_ART": "string->space-art",
        "primitive_fmt_reset":                  "fmt:reset",
        "primitive_fmt_clear":                  "fmt:clear",
        "primitive_fmt_bold":                   "fmt:bold",
        "primitive_fmt_line":                   "fmt:line",
        "primitive_fmt_rev":                    "fmt:rev",
        "primitive_fmt_black":                  "fmt:black",
        "primitive_fmt_red":                    "fmt:red",
        "primitive_fmt_green":                  "fmt:green",
        "primitive_fmt_yellow":                 "fmt:yellow",
        "primitive_fmt_blue":                   "fmt:blue",
        "primitive_fmt_magenta":                "fmt:magenta",
        "primitive_fmt_cyan":                   "fmt:cyan",
        "primitive_fmt_white":                  "fmt:white",
        "primitive_fmt_black1":                 "fmt:black1",
        "primitive_fmt_black2":                 "fmt:black2",
        "primitive_fmt_black3":                 "fmt:black3",
        "primitive_fmt_black4":                 "fmt:black4",
        "primitive_fmt_black5":                 "fmt:black5",
        "primitive_fmt_black6":                 "fmt:black6",
        "primitive_fmt_black7":                 "fmt:black7",
        "primitive_fmt_black8":                 "fmt:black8",
        "primitive_fmt_red1":                   "fmt:red1",
        "primitive_fmt_red2":                   "fmt:red2",
        "primitive_fmt_red3":                   "fmt:red3",
        "primitive_fmt_red4":                   "fmt:red4",
        "primitive_fmt_red5":                   "fmt:red5",
        "primitive_fmt_red6":                   "fmt:red6",
        "primitive_fmt_red7":                   "fmt:red7",
        "primitive_fmt_red8":                   "fmt:red8",
        "primitive_fmt_green1":                 "fmt:green1",
        "primitive_fmt_green2":                 "fmt:green2",
        "primitive_fmt_green3":                 "fmt:green3",
        "primitive_fmt_green4":                 "fmt:green4",
        "primitive_fmt_green5":                 "fmt:green5",
        "primitive_fmt_green6":                 "fmt:green6",
        "primitive_fmt_green7":                 "fmt:green7",
        "primitive_fmt_green8":                 "fmt:green8",
        "primitive_fmt_yellow1":                "fmt:yellow1",
        "primitive_fmt_yellow2":                "fmt:yellow2",
        "primitive_fmt_yellow3":                "fmt:yellow3",
        "primitive_fmt_yellow4":                "fmt:yellow4",
        "primitive_fmt_yellow5":                "fmt:yellow5",
        "primitive_fmt_yellow6":                "fmt:yellow6",
        "primitive_fmt_yellow7":                "fmt:yellow7",
        "primitive_fmt_yellow8":                "fmt:yellow8",
        "primitive_fmt_blue1":                  "fmt:blue1",
        "primitive_fmt_blue2":                  "fmt:blue2",
        "primitive_fmt_blue3":                  "fmt:blue3",
        "primitive_fmt_blue4":                  "fmt:blue4",
        "primitive_fmt_blue5":                  "fmt:blue5",
        "primitive_fmt_blue6":                  "fmt:blue6",
        "primitive_fmt_blue7":                  "fmt:blue7",
        "primitive_fmt_blue8":                  "fmt:blue8",
        "primitive_fmt_magenta1":               "fmt:magenta1",
        "primitive_fmt_magenta2":               "fmt:magenta2",
        "primitive_fmt_magenta3":               "fmt:magenta3",
        "primitive_fmt_magenta4":               "fmt:magenta4",
        "primitive_fmt_magenta5":               "fmt:magenta5",
        "primitive_fmt_magenta6":               "fmt:magenta6",
        "primitive_fmt_magenta7":               "fmt:magenta7",
        "primitive_fmt_magenta8":               "fmt:magenta8",
        "primitive_fmt_cyan1":                  "fmt:cyan1",
        "primitive_fmt_cyan2":                  "fmt:cyan2",
        "primitive_fmt_cyan3":                  "fmt:cyan3",
        "primitive_fmt_cyan4":                  "fmt:cyan4",
        "primitive_fmt_cyan5":                  "fmt:cyan5",
        "primitive_fmt_cyan6":                  "fmt:cyan6",
        "primitive_fmt_cyan7":                  "fmt:cyan7",
        "primitive_fmt_cyan8":                  "fmt:cyan8",
        "primitive_fmt_white1":                 "fmt:white1",
        "primitive_fmt_white2":                 "fmt:white2",
        "primitive_fmt_white3":                 "fmt:white3",
        "primitive_fmt_white4":                 "fmt:white4",
        "primitive_fmt_white5":                 "fmt:white5",
        "primitive_fmt_white6":                 "fmt:white6",
        "primitive_fmt_white7":                 "fmt:white7",
        "primitive_fmt_white8":                 "fmt:white8",
        "primitive_fmt_bblack":                 "fmt:bblack",
        "primitive_fmt_bred":                   "fmt:bred",
        "primitive_fmt_bgreen":                 "fmt:bgreen",
        "primitive_fmt_byellow":                "fmt:byellow",
        "primitive_fmt_bblue":                  "fmt:bblue",
        "primitive_fmt_bmagenta":               "fmt:bmagenta",
        "primitive_fmt_bcyan":                  "fmt:bcyan",
        "primitive_fmt_bwhite":                 "fmt:bwhite",
        "primitive_fmt_bblack1":                "fmt:bblack1",
        "primitive_fmt_bblack2":                "fmt:bblack2",
        "primitive_fmt_bblack3":                "fmt:bblack3",
        "primitive_fmt_bblack4":                "fmt:bblack4",
        "primitive_fmt_bblack5":                "fmt:bblack5",
        "primitive_fmt_bblack6":                "fmt:bblack6",
        "primitive_fmt_bblack7":                "fmt:bblack7",
        "primitive_fmt_bblack8":                "fmt:bblack8",
        "primitive_fmt_bred1":                  "fmt:bred1",
        "primitive_fmt_bred2":                  "fmt:bred2",
        "primitive_fmt_bred3":                  "fmt:bred3",
        "primitive_fmt_bred4":                  "fmt:bred4",
        "primitive_fmt_bred5":                  "fmt:bred5",
        "primitive_fmt_bred6":                  "fmt:bred6",
        "primitive_fmt_bred7":                  "fmt:bred7",
        "primitive_fmt_bred8":                  "fmt:bred8",
        "primitive_fmt_bgreen1":                "fmt:bgreen1",
        "primitive_fmt_bgreen2":                "fmt:bgreen2",
        "primitive_fmt_bgreen3":                "fmt:bgreen3",
        "primitive_fmt_bgreen4":                "fmt:bgreen4",
        "primitive_fmt_bgreen5":                "fmt:bgreen5",
        "primitive_fmt_bgreen6":                "fmt:bgreen6",
        "primitive_fmt_bgreen7":                "fmt:bgreen7",
        "primitive_fmt_bgreen8":                "fmt:bgreen8",
        "primitive_fmt_byellow1":               "fmt:byellow1",
        "primitive_fmt_byellow2":               "fmt:byellow2",
        "primitive_fmt_byellow3":               "fmt:byellow3",
        "primitive_fmt_byellow4":               "fmt:byellow4",
        "primitive_fmt_byellow5":               "fmt:byellow5",
        "primitive_fmt_byellow6":               "fmt:byellow6",
        "primitive_fmt_byellow7":               "fmt:byellow7",
        "primitive_fmt_byellow8":               "fmt:byellow8",
        "primitive_fmt_bblue1":                 "fmt:bblue1",
        "primitive_fmt_bblue2":                 "fmt:bblue2",
        "primitive_fmt_bblue3":                 "fmt:bblue3",
        "primitive_fmt_bblue4":                 "fmt:bblue4",
        "primitive_fmt_bblue5":                 "fmt:bblue5",
        "primitive_fmt_bblue6":                 "fmt:bblue6",
        "primitive_fmt_bblue7":                 "fmt:bblue7",
        "primitive_fmt_bblue8":                 "fmt:bblue8",
        "primitive_fmt_bmagenta1":              "fmt:bmagenta1",
        "primitive_fmt_bmagenta2":              "fmt:bmagenta2",
        "primitive_fmt_bmagenta3":              "fmt:bmagenta3",
        "primitive_fmt_bmagenta4":              "fmt:bmagenta4",
        "primitive_fmt_bmagenta5":              "fmt:bmagenta5",
        "primitive_fmt_bmagenta6":              "fmt:bmagenta6",
        "primitive_fmt_bmagenta7":              "fmt:bmagenta7",
        "primitive_fmt_bmagenta8":              "fmt:bmagenta8",
        "primitive_fmt_bcyan1":                 "fmt:bcyan1",
        "primitive_fmt_bcyan2":                 "fmt:bcyan2",
        "primitive_fmt_bcyan3":                 "fmt:bcyan3",
        "primitive_fmt_bcyan4":                 "fmt:bcyan4",
        "primitive_fmt_bcyan5":                 "fmt:bcyan5",
        "primitive_fmt_bcyan6":                 "fmt:bcyan6",
        "primitive_fmt_bcyan7":                 "fmt:bcyan7",
        "primitive_fmt_bcyan8":                 "fmt:bcyan8",
        "primitive_fmt_bwhite1":                "fmt:bwhite1",
        "primitive_fmt_bwhite2":                "fmt:bwhite2",
        "primitive_fmt_bwhite3":                "fmt:bwhite3",
        "primitive_fmt_bwhite4":                "fmt:bwhite4",
        "primitive_fmt_bwhite5":                "fmt:bwhite5",
        "primitive_fmt_bwhite6":                "fmt:bwhite6",
        "primitive_fmt_bwhite7":                "fmt:bwhite7",
        "primitive_fmt_bwhite8":                "fmt:bwhite8",
  },
  "../primitives/stdlib/sys/io/input/input.hpp": {
        "primitive_READ":        "read",
        "primitive_READ_STRING": "read-string",
        "primitive_READ_LINE":   "read-line",
        "primitive_READ_CHAR":   "read-char",
        "primitive_PEEK_CHAR":   "peek-char",
        "primitive_CHAR_READYP": "char-ready?",
        "primitive_SLURP_PORT":  "slurp-port",
        "primitive_SLURP_FILE":  "slurp-file",
  },
  "../primitives/stdlib/sys/filesystem/filesystem.hpp": {
        "primitive_GETCWD":                  "getcwd",
        "primitive_DIRNAME":                 "dirname",
        "primitive_MKDIR":                   "mkdir",
        "primitive_CHDIR":                   "chdir",
        "primitive_FILEP":                   "file?",
        "primitive_DIRECTORYP":              "directory?",
        "primitive_PATHP":                   "path?",
        "primitive_DIRECTORY_ENTRIES":       "directory-entries",
        "primitive_DIRECTORY_ENTRIES_STAR":  "directory-entries*",
        "primitive_COPY_PATH":               "copy-path",
        "primitive_DELETE_PATH_BANG":        "delete-path!",
        "primitive_RENAME_PATH_BANG":        "rename-path!",
        "primitive_FILE_SIZE":               "file-size",
        "primitive_FILE_EXTENSION":          "file-extension",
        "primitive_HAS_FILE_EXTENSIONP":     "has-file-extension?",
        "primitive_SET_FILE_EXTENSION_BANG": "set-file-extension!",
        "primitive_SWAP_FILE_EXTENSION":     "swap-file-extension",
  },
  "../primitives/stdlib/data/atomics/ports/ports.hpp": {
        "primitive_OPEN_PORTP":            "open-port?",
        "primitive_CLOSED_PORTP":          "closed-port?",
        "primitive_CURRENT_INPUT_PORT":    "current-input-port",
        "primitive_CURRENT_OUTPUT_PORT":   "current-output-port",
        "primitive_CALL_WITH_INPUT_FILE":  "call-with-input-file",
        "primitive_CALL_WITH_OUTPUT_FILE": "call-with-output-file",
        "primitive_WITH_INPUT_FROM_FILE":  "with-input-from-file",
        "primitive_WITH_OUTPUT_TO_FILE":   "with-output-to-file",
        "primitive_OPEN_INPUT_FILE":       "open-input-file",
        "primitive_OPEN_OUTPUT_FILE":      "open-output-file",
        "primitive_OPEN_OUTPUT_FILE_PLUS": "open-output-file+",
        "primitive_OPEN_OUTPUT_FILE_BANG": "open-output-file!",
        "primitive_REWIND_PORT_BANG":      "rewind-port!",
        "primitive_PORT_SEEK_FRONT_BANG":  "port-seek-front!",
        "primitive_PORT_SEEK_BANG":        "port-seek!",
        "primitive_CLOSE_PORT":            "close-port",
  },
  "../primitives/stdlib/sys/sysinterface/sysinterface.hpp": {
        "*primitive_LOAD":                    "load",
        "*primitive_CPS_LOAD":                "heist:core:pass-continuation-cps-load",
        "primitive_COMPILE":                  "compile",
        "primitive_CPS_COMPILE":              "cps-compile",
        "primitive_SYSTEM":                   "system",
        "primitive_GETENV":                   "getenv",
        "primitive_COMMAND_LINE":             "command-line",
        "primitive_MILLISECONDS_SINCE_EPOCH": "ms-since-epoch",
        "primitive_TIME":                     "time",
        "primitive_CURRENT_DATE":             "current-date",
  },
  "../primitives/stdlib/lang/evalapply/evalapply.hpp": {
        "*primitive_EVAL":     "eval",
        "*primitive_CPS_EVAL": "heist:core:pass-continuation-cps-eval",
        "*primitive_APPLY":    "apply",
  },
  "../primitives/stdlib/lang/invariants/invariants.hpp": {
        "primitive_SET_NANSI_BANG":               "set-nansi!",
        "primitive_NANSIP":                       "nansi?",
        "primitive_CIP":                          "ci?",
        "primitive_SET_PPRINT_COLUMN_WIDTH_BANG": "set-pprint-column-width!",
        "primitive_PPRINT_COLUMN_WIDTH":          "pprint-column-width",
        "primitive_SET_MAX_RECURSION_DEPTH_BANG": "set-max-recursion-depth!",
        "primitive_MAX_RECURSION_DEPTH":          "max-recursion-depth",
        "primitive_SET_REPL_PROMPT_BANG":         "set-repl-prompt!",
        "primitive_REPL_PROMPT":                  "repl-prompt",
        "primitive_SET_DYNAMIC_CALL_TRACE_BANG":  "set-dynamic-call-trace!",
        "primitive_DYNAMIC_CALL_TRACEP":          "dynamic-call-trace?",
        "primitive_SET_TRACE_ARGS_BANG":          "set-trace-args!",
        "primitive_TRACE_ARGSP":                  "trace-args?",
        "primitive_SET_DOT_BANG":                 "set-dot!",
        "primitive_DOT":                          "dot",
        "primitive_SET_FALSEY_BANG":              "set-falsey!",
        "primitive_SET_TRUTHY_BANG":              "set-truthy!",
        "primitive_FALSEY_VALUES":                "falsey-values",
  },
  "../primitives/stdlib/lang/controlflow/controlflow.hpp": {
        "primitive_EXIT":                                  "exit",
        "primitive_ERROR":                                 "error",
        "primitive_SYNTAX_ERROR":                          "syntax-error",
        "primitive_COERCE_LEXICAL_SCOPE_TO_DYNAMIC_SCOPE": "lexical-scope->dynamic-scope",
        "primitive_COERCE_DYNAMIC_SCOPE_TO_LEXICAL_SCOPE": "dynamic-scope->lexical-scope",
        "primitive_DYNAMIC_SCOPEP":                        "dynamic-scope?",
        "primitive_LEXICAL_SCOPEP":                        "lexical-scope?",
        "primitive_JUMP_BANG":                             "jump!",
        "primitive_CATCH_JUMP":                            "catch-jump",
        "*primitive_EXPAND":                               "expand",
        "primitive_CORE_EXPAND":                           "core-expand",
        "primitive_TRACE":                                 "trace",
        "primitive_HEIST_CORE_APPLY_WITH_CONTINUATION":    "heist:core:apply-with-continuation",
  },
  "../primitives/stdlib/lang/macros/gensyms/gensyms.hpp": {
        "primitive_SYMBOL_APPEND": "symbol-append",
        "primitive_GENSYM":        "gensym",
        "primitive_SOWN_GENSYM":   "sown-gensym",
  },
  "../primitives/stdlib/lang/macros/syntax/syntax.hpp": {
        "primitive_CORE_SYNTAXP":                "core-syntax?",
        "*primitive_RUNTIME_SYNTAXP":            "runtime-syntax?",
        "primitive_READER_SYNTAXP":              "reader-syntax?",
        "primitive_READER_ALIASP":               "reader-alias?",
        "primitive_DELETE_CORE_SYNTAX_BANG":     "delete-core-syntax!",
        "*primitive_DELETE_RUNTIME_SYNTAX_BANG": "delete-runtime-syntax!",
        "primitive_DEFINE_READER_SYNTAX":        "define-reader-syntax",
        "primitive_READER_SYNTAX_LIST":          "reader-syntax-list",
        "primitive_READER_ALIAS_LIST":           "reader-alias-list",
        "primitive_INFIX_LIST":                  "infix-list",
  },
  "../primitives/stdlib/parse/json/json.hpp": {
        "primitive_COERCE_JSON_TO_SCM": "json->scm",
        "primitive_COERCE_SCM_TO_JSON": "scm->json",
        "primitive_JSON_DATUMP":        "json-datum?",
  },
  "../primitives/stdlib/parse/csv/csv.hpp": {
        "primitive_COERCE_LIST_TO_CSV":   "list->csv",
        "primitive_COERCE_VECTOR_TO_CSV": "vector->csv",
        "primitive_COERCE_CSV_TO_LIST":   "csv->list",
        "primitive_COERCE_CSV_TO_VECTOR": "csv->vector",
        "primitive_CSV_DATUMP":           "csv-datum?",
  },
  "../primitives/stdlib/data/oo/objects/objects.hpp": {
        "primitive_HEIST_CORE_OO_SET_PROPERTY_BANG": "heist:core:oo:set-property!",
        "primitive_HEIST_CORE_OO_ADD_PROPERTY_BANG": "heist:core:oo:add-property!",
        "primitive_HEIST_CORE_OO_MAKE_OBJECT":       "heist:core:oo:make-object",
        "primitive_OBJECT_MEMBERS":                  "object-members",
        "primitive_OBJECT_METHODS":                  "object-methods",
        "primitive_HEIST_CORE_OO_MEMBER_ACCESS":     "..",
        "primitive_COERCE_OBJECT_TO_HMAP":           "object->hmap",
        "primitive_COERCE_OBJECT_TO_ALIST":          "object->alist",
        "primitive_COERCE_OBJECT_TO_JSON":           "object->json",
  },
  "../primitives/stdlib/data/oo/prototypes/prototypes.hpp": {
        "primitive_PROTO_NAME":              "proto-name",
        "primitive_PROTO_MEMBERS":           "proto-members",
        "primitive_PROTO_METHODS":           "proto-methods",
        "primitive_PROTO_SUPER":             "proto-super",
        "primitive_PROTO_ADD_PROPERTY_BANG": "proto-add-property!",
  },
  "../primitives/stdlib/data/atomics/coroutines/coroutines.hpp": {
        "primitive_CYCLE_COROUTINES_BANG": "cycle-coroutines!",
  },
  "../primitives/stdlib/data/atomics/universes/universes.hpp": {
        "primitive_HEIST_CORE_UNIVERSE_EVAL": "heist:core:universe:eval",
  },
  "../primitives/stdlib/lang/help/help.hpp": {
        "primitive_HELP": "help",
  },
}